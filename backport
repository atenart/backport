#!/usr/bin/python3
# -*- coding:utf-8 -*
#
# Copyright (C) 2018 Antoine Tenart <antoine.tenart@bootlin.com>
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.

'''Backport git commits on tracked files from a branch to the local one

Usage:
  backport-commits [-c <cfg>] [--apply] [-f] [--cmd=<command>] <branch>

Options:
  -h                Display this help.
  -c <cfg>          Configuration file [Default: ./backport.cfg].
  --apply           Apply the commits found on the current branch (cherry-pick).
  -f                Continue cherry-picking commits on failure.
  --cmd=<command>   Command to run between each cherry-pick.
'''

from collections import OrderedDict
from docopt import docopt
import sys
import subprocess

class Branch:
    def __init__(self, branch, tracked):
        self.commits = OrderedDict()

        git = ['git', 'log', '--reverse', '--format=oneline', branch, '--']
        command = git + tracked

        result = subprocess.check_output(command, stderr=subprocess.STDOUT).decode().split('\n')
        for line in result:
            h = line.split(' ')[0]
            msg = ' '.join(line.split(' ')[1:])
            self.commits[h] = msg

class Config:
    def __init__(self, path):
        self.config = OrderedDict()

        with open(path) as f:
            lines = f.read().splitlines()
        self.parse([line.strip() for line in lines if not line.startswith('#')])

    def parse(self, lst):
        key = 'default'
        for line in lst:
            if line.startswith('[') and line.endswith(']'):
                key = line[1:-1]
                self.config[key] = []
                continue
            if len(line):
                self.config[key].append(line)

    def tracked_files(self):
        return self.config['tracked-files']

    def blacklisted_commits(self):
        return self.config['blacklisted-commits']

def current_branch():
    command = ['git', 'rev-parse', '--abbrev-ref', 'HEAD']
    return subprocess.check_output(command).decode().strip()

def cherry_pick(commit):
    command = ['git', 'cherry-pick', commit]
    result = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if result.returncode:
        command = ['git', 'cherry-pick', '--abort']
        subprocess.run(command, stderr=subprocess.DEVNULL)

    return result.returncode

if __name__ == '__main__':
    args = docopt(__doc__)

    config = Config(args['-c'])
    tracked = config.tracked_files()
    blacklist = config.blacklisted_commits()

    f = Branch(args['<branch>'], tracked)
    t = Branch(current_branch(), tracked)

    to_backport = OrderedDict()
    for k,v in f.commits.items():
        if v in t.commits.values() or v.startswith('Merge'):
            continue
        if v in blacklist:
            continue
        to_backport[k] = v

    i = 1
    tot = len(to_backport)
    for k,v in to_backport.items():
        if args['--apply']:
            ret = cherry_pick(k)
            if ret:
                print("Could not apply %s %s" % (k, v))
                if not args['-f']:
                    sys.exit(1)
                continue

        print("[%d/%d] %s %s" % (i, tot, k, v))
        i += 1

        if args['--apply'] and args['--cmd']:
            result = subprocess.run(args['--cmd'], shell=True)
            if result.returncode and not args['-f']:
                sys.exit(result.returncode)
